<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Emacs Syntax Highlight</title>
    <link rel="stylesheet" href="index.css" />
  </head>
  <body>
    <div id="main">
      <h1>Emacs Syntax Highlight</h1>
      <form>
        <p>
          <label for="mode">Major mode: </label>
          <input list="mode-list" id="mode" type="text" value="emacs-lisp-mode" required />
          <datalist id="mode-list">
            {{#modes}}
            <option value="{{.}}">
            {{/modes}}
          </datalist>
        </p>
        <p>
          <label for="theme">Theme: </label>
          <select id="theme">
            {{#themes}}
            <option value="{{.}}">{{.}}</option>
            {{/themes}}
          </select>
        </p>
        <p>
          <span>Background mode: </span>
          <input
            type="radio"
            id="light"
            name="backgroundMode"
            value=""
            checked
          />
          <label for="id">light (default)</label>
          <input type="radio" id="dark" name="backgroundMode" value="dark" />
          <label for="id">dark</label>
        </p>
        <p>
          <label for="code">Code: </label>
          <textarea id="code" rows="12" required>
(defmacro with-temp-buffer (&rest body)
  "Create a temporary buffer, and evaluate BODY there like `progn'.
See also `with-temp-file' and `with-output-to-string'."
  (declare (indent 0) (debug t))
  (let ((temp-buffer (make-symbol "temp-buffer")))
    `(let ((,temp-buffer (generate-new-buffer " *temp*")))
       ;; `kill-buffer' can change current-buffer in some odd cases.
       (with-current-buffer ,temp-buffer
         (unwind-protect
	     (progn ,@body)
           (and (buffer-name ,temp-buffer)
                (kill-buffer ,temp-buffer)))))))</textarea
          >
        </p>
        <p>
          <input type="submit" value="Highlight" />
        </p>
        <p>
          <output id="result" for="mode theme code"></output>
        </p>
      </form>
      <footer>
        <p>
          The syntax highlighting is powered by GNU Emacs using
          <a href="https://github.com/Lindydancer/e2ansi">e2ansi</a> and
          <a href="https://www.npmjs.com/package/ansi-to-html">ansi-to-html</a>.
        </p>
        <p>
          View source on
          <a
            href="https://github.com/xuchunyang/emacs-syntax-highlighting-as-a-service"
            >GitHub</a
          >
        </p>
      </footer>
    </div>
    <script>
      const form = document.querySelector("form");
      let saveState = () => {};
      let loadState = () => {};
      try {
        localStorage;
        let saveState = (state) => {
          console.log("saveState");
          localStorage.setItem("state", JSON.stringify(state));
        };
        let loadState = () => {
          let state = localStorage.getItem("state");
          if (state) {
            console.log("loadState");
            state = JSON.parse(state);
            form.mode.value = state.mode;
            form.theme.value = state.theme;
            form.backgroundMode.value = state.backgroundMode;
            form.code.value = state.code;
            form.result.innerHTML = state.result;
          }
        };
      } catch (e) {
        console.log("localStorage is not available", e);
      }
      loadState();
      form.onsubmit = (e) => {
        e.preventDefault();
        form.result.value = "Sending your code to server to highlight...";
        const mode = form.mode.value;
        const code = form.code.value;
        const theme = form.theme.value;
        const backgroundMode = form.backgroundMode.value;
        fetch("/api/highlight", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ mode, code, theme, backgroundMode }),
        })
          .then((response) => response.json())
          .then((json) => {
            console.log("JSON:", json);
            // error case 1, missing args
            if (json.error) {
              form.result.value = json.error;
              return;
            }
            // error case 2, from exec
            const { error, stderr, stdout } = json.data;
            if (error || stderr) {
              form.result.value = "Error: " + (error || stderr);
              return;
            }
            // finally show the result
            form.result.innerHTML = `<pre>${json.data.stdout}</pre>`;

            saveState({
              mode,
              code,
              theme,
              backgroundMode,
              result: form.result.innerHTML,
            });
          })
          .catch((error) => {
            console.error(error);
            form.result.value = "Error: " + error.message;
          });
      };
    </script>
  </body>
</html>
